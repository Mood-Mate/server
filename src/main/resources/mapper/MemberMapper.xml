<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.pado.socialdiary.api.moduel.member.repository.MemberMapper">
    <insert id="save" parameterType="com.pado.socialdiary.api.moduel.member.entity.Member" useGeneratedKeys="true"
            keyProperty="memberId">
        INSERT INTO TB_MEMBER(EMAIL, PASSWORD, LOGIN_PROVIDER, NAME, NICKNAME, PICTURE, DATE_OF_BIRTH, GENDER)
        VALUES (#{email}, #{password}, #{loginProvider}, #{name}, #{nickname}, #{picture}, #{dateOfBirth}, #{gender})
    </insert>

    <update id="updateRegOrUpdColumn">
        UPDATE TB_MEMBER
        SET REG_ID = #{memberId},
            REG_DT = NOW(),
            UPD_ID = #{memberId},
            UPD_DT = NOW()
        WHERE TB_MEMBER.MEMBER_ID = #{memberId}
    </update>

    <update id="update" parameterType="com.pado.socialdiary.api.moduel.member.dto.MemberUpdateRequest">
        UPDATE TB_MEMBER SET
            <if test='password != null and password != ""'>
                PASSWORD = #{password},
            </if>
            <if test='name != null and name != ""'>
                NAME = #{name},
            </if>
            <if test='nickname != null and nickname != ""'>
                NICKNAME = #{nickname},
            </if>
            <if test='picture != null and picture != ""'>
                PICTURE = #{picture},
            </if>
                UPD_ID = #{memberId},
                UPD_DT = NOW()
        WHERE MEMBER_ID = #{memberId}
    </update>
    <update id="updateIntroduce">
        UPDATE TB_MEMBER SET
            TB_MEMBER.INTRODUCE = #{introduce}
        WHERE MEMBER_ID = #{memberId}
    </update>

    <insert id="saveHistory" parameterType="com.pado.socialdiary.api.moduel.member.entity.Member" useGeneratedKeys="true">
        INSERT INTO TB_MEMBER_HISTORY(MEMBER_ID, EMAIL, PASSWORD, LOGIN_PROVIDER, NAME, NICKNAME, PICTURE,
                                      DATE_OF_BIRTH, GENDER, REG_ID, REG_DT, UPD_ID, UPD_DT)
        VALUES (#{memberId}, #{email}, #{password}, #{loginProvider}, #{name}, #{nickname}, #{picture}, #{dateOfBirth},
                #{gender}, #{regId}, #{regDt}, #{updId}, NOW())
    </insert>


    <select id="findByEmail" resultType="com.pado.socialdiary.api.moduel.member.entity.Member">
        SELECT *
        FROM TB_MEMBER
        WHERE TB_MEMBER.EMAIL = #{email};
    </select>

    <select id="findDuplicateEmailCount" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM TB_MEMBER
        WHERE TB_MEMBER.EMAIL = #{email}
    </select>
    <select id="getByMemberId" resultType="com.pado.socialdiary.api.moduel.member.entity.Member">
        SELECT *
        FROM TB_MEMBER
        WHERE TB_MEMBER.MEMBER_ID = #{memberId}
    </select>

    <select id="findMemberByKeyword" resultType="com.pado.socialdiary.api.moduel.member.dto.MemberSearchResponse">
        SELECT
            MEMBER_ID,
            EMAIL,
            PICTURE,
            NAME,
            NICKNAME
        FROM TB_MEMBER
        WHERE
            EMAIL LIKE '%${keyword}%'
        OR  NAME LIKE '%${keyword}%'
        OR  NICKNAME LIKE '%${keyword}%'
    </select>
    <select id="findFollowMember" resultType="com.pado.socialdiary.api.moduel.follow.entity.Follow">
        SELECT
            FOLLOW_ID,
            FOLLOWER_MEMBER_ID,
            FOLLOWEE_MEMBER_ID
        FROM TB_FOLLOW
        WHERE FOLLOWER_MEMBER_ID = #{memberId}
    </select>
    <select id="findMemberProfile" resultType="com.pado.socialdiary.api.moduel.member.dto.MemberProfileResponse">
        SELECT
            TB_MEMBER.MEMBER_ID,
            TB_MEMBER.LOGIN_PROVIDER,
            TB_MEMBER.NAME,
            TB_MEMBER.NICKNAME,
            TB_MEMBER.PICTURE,
            TB_MEMBER.INTRODUCE
        FROM TB_MEMBER
        WHERE TB_MEMBER.MEMBER_ID = #{memberId}
    </select>

    <delete id="deleteMember">
        DELETE FROM TB_MEMBER WHERE TB_MEMBER.MEMBER_ID = #{memberId}
    </delete>
    <delete id="deleteMemberHistory">
        DELETE FROM TB_MEMBER_HISTORY WHERE TB_MEMBER_HISTORY.MEMBER_ID = #{memberId}
    </delete>

    <select id="getFollowerCount" resultType="integer">
        SELECT COUNT(FOLLOW_ID) FROM TB_FOLLOW WHERE FOLLOWER_MEMBER_ID = #{memberId}
    </select>
    <select id="getFolloweeCount" resultType="integer">
        SELECT COUNT(FOLLOW_ID) FROM TB_FOLLOW WHERE FOLLOWEE_MEMBER_ID = #{memberId}
    </select>
</mapper>
